#ifndef _VectorManip_included_
#define _VectorManip_included_

# include <vector>
# include <iostream>
# include <fstream>
# include <string>
# include <cstring>
# include <cmath>
# include <sstream>
# include <time.h>
# include <iomanip>

template <class T>
void Print3DVectorSize(vector< vector< vector<T> > > ThreeDArray, string name)
{
	int Size1, Size2, Size3;
	Size1=ThreeDArray.size();
	Size2=ThreeDArray[0].size();
	Size3=ThreeDArray[0][0].size();
	cout <<name<<"["<<Size1<<"]["<<Size2<<"]["<<Size3<<"]"<<endl;
}

template <class T>
void Print2DVectorSize(vector< vector<T> >  TwoDArray, string name)
{
	int Size1, Size2;
	Size1=TwoDArray.size();
	Size2=TwoDArray[0].size();
	cout <<name<<"["<<Size1<<"]["<<Size2<<"]"<<endl;
}

template <class Vector_T>
void CreateVector(Vector_T &v, int Size)
{
	int i;
	for (i=0;i<Size;i++) v.push_back(0);
}

template <class Vector_T>
void DeleteVector(Vector_T &v)
{
	int i, Size=v.size();
	for (i=0;i<Size;i++) v.pop_back();
}

template <class Vector_T>
void Create3DArray(vector< vector<Vector_T> > &array, int size1, int size2, int size3)
{
	int i;
	Vector_T v;
	vector<Vector_T> matrix;
	DeleteVector(array);
	for (i=0;i<size3;i++) v.push_back(0);
	for (i=0;i<size2;i++) matrix.push_back(v);
	for (i=0;i<size1;i++) array.push_back(matrix);
}

template <class Vector_T>
void CopyVector(Vector_T v1, Vector_T &v2)
{
	int i, Size=v1.size();
	DeleteVector(v2);
	for (i=0;i<Size;i++) v2.push_back(v1[i]);
}

template <class Vector_T>
void AppendVector(Vector_T v1, Vector_T &v2)
{
	int i, Size=v1.size();
	cout <<"Size= "<<Size<<endl;
	for (i=0;i<Size;i++) v2.push_back(v1[i]);
	cout <<"Size2= "<<v2.size()<<endl;
}

template <class Vector_T>
void CreateMatrix(vector<Vector_T> &m, int size1, int size2)
{
	int i;
	Vector_T v;
	DeleteVector(m);
	CreateVector(v, size2);
	for (i=0;i<size1;i++) m.push_back(v);
	
}

template <class Vector_T>
void PrintVector(Vector_T &v)
{
	int i, Size=v.size();
	for (i=0;i<Size;i++) cout <<v[i]<<endl;
}
#endif
