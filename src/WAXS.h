#ifndef _WAXS160_debug_include_
#define _WAXS160_debug_include_
# include "lib/ResidueCode.h"
# include "lib/Structures.h"
# include "lib/MathUtils.h"
# include "lib/IOUtils.h"
# include "lib/ReadPdb.h"
# include "lib/AtomCode.h"
# include "lib/AtomIDs.h"

struct ParamStruct
{
	bool AngularDependence, AngularDependence2, BoolFFT, BoolMerge;
        bool CalcNoHydrationIntensity, CalcPrFromExperiment, ConvexConcave;
        bool ConvexConcave2, CalcPrFromStructure, CalcPrFromStructure2, CalcRg;
        bool CalcVacuumIntensity, CenterAtomsInBox, DoFit, DoTrajectory;
        bool ElectrostaticPotential, PhobicPhilic, MoveProtein;
        bool ReadAngleFile, ReadUnknownResidues, ReadWaters, RoundGrid;
        bool SecondNearestNeighbor, UniformHydrationShell, UseChargeRadii;
        bool UseCharges, UseWaterSphere, verbose;
	string AngleFile, AssignCubes, AtomTypesGofRFile, DCDFiles;
	string ElementsGofRFile, ExperimentFile, excluded;
	string ExcludedVolumeSphereType, FFTType, GofRFile, histogram;
	string HydrationRadiusOption, InputCubeDensityPdbFile;
	string IntensityOutputFile, OutputCubeDensityPdbFile, NormalGofRFile;
        string NormalElementsGofRFile, PdbList, PrFile;
	string PrFromStructureFile, PrFromStructureFile2, PrmFile, PsfFile;
	string RemoveCavities, RtfFile, TotalElectronsFile, ScatteringType;
        string SolventOption, VDWRadiusOption, VolumeOption, xyz;
	int BeginFit, EndFit, lmax, nDCDFiles, NumPerEdge, nstructures, points;
	int skip, VectorsPerInclination;
	Real AngleBin, AngularCutOff, bin, BoxSize, ChargeRadiiScale, contrast;
        Real CubeSize, ElectrostaticPotentialBinSize, hsdensity;
        Real HydrationSpacing, HydrationRadiusScale;
        Real PenaltyCoefficient, PrdfBulkDensity, RecBin, RadiusHydrogen;
        Real RadiusCarbon, RadiusNitrogen, RadiusOxygen, RadiusSulfur;
        Real RadiusIron, RadiusPhosphorus, RadiusSodium, RadiusHydrationShell;
        Real MaxDistForZeroDensity, MaxElectrostaticPotential, maxhs, MaxS;
        Real MinElectrostaticPotential, SphereRadius, VDWOffSet, VDWScale;
	Real XBoxLength, YBoxLength, ZBoxLength;
	Real XOrigin, YOrigin, ZOrigin;
	
};

struct IntensityStruct
{
	vector<Real> calc, CalcError, error, expi, s;
	vector<Real> vacuum, NoHydration;
	vector< vector< vector<Real> > > point, CrossTerm;
	vector< vector<Real> > f;
	vector< vector<Real> > sinc;
};

Real calcExcludedElectrons(Real density, Real atomr, ParamStruct &params);
void CalculateExcludedElectrons(Real ExcludedElectrons[], Real density, Real atomr[], ParamStruct &params);
void CalculateSolventCorrectedElectrons(Real SolventCorrectedElectrons[], Real NumElectrons[], Real ExcludedElectrons[], Real atomr[], ParamStruct &params);
int ReadPdbCube(vector<CubeStruct> &cubes, ParamStruct &params);
int ReadPdbCube(Real contrast, vector<CubeStruct> &cubes, ParamStruct &params);
void GetTinkerCharges(string keyfile, vector<AtomStruct> &Atoms);
void cart2sphere(Real r[], Real phi[], Real stheta[], Real ctheta[], vector<AtomStruct> &Atoms);
Real bessel2(long double r, int l);
Real bessel(long double r, int l, long double sterm[]);
void PrintAtomr(Real atomr[]);
void FindProteinCenter(Real atomm[], Real contrast, Real atomr[], vector<AtomStruct> &Atoms, ParamStruct &params, Real &avex, Real &avey, Real &avez);
void center(Real atomm[], Real density, Real atomr[], vector<AtomStruct> &Atoms, ParamStruct &params);
void DistanceMatrix(vector<AtomStruct> Atoms);
void findradii(int natom, Real numatom[], Real atomr[], vector<AtomStruct> Atoms);
void FindRadii2(int natom, Real atomr[], Real numatom[], vector<AtomStruct> &Atoms);
void FitQuadratic(Real x1, Real y1, Real x2, Real y2, Real x3, Real y3, Real &a, Real &b, Real &c);
void FindRadii3(int natom, Real atomr[], Real numatom[], vector<AtomStruct> &Atoms);
Real Overlap(int TotalParticles, Real atomr[], vector<AtomStruct> &Atoms);
void MinMax(Real &XMin, Real &YMin, Real &ZMin, Real &XMax, Real &YMax, Real &ZMax, vector<AtomStruct> Atoms, int natom);
Real findvolume(int natom, Real atomr[], Real numatom[], vector<AtomStruct> Atoms);
void FourGaussianParameters(Real a[][NumAtomTypes], Real b[][NumAtomTypes], Real c[]);
void FiveGaussianParameters(Real a[][NumAtomTypes], Real b[][NumAtomTypes], Real c[]);
void SANSParameters(Real a[][NumAtomTypes], Real b[][NumAtomTypes], Real c[]);
Real ScatteringFactor(Real a[][NumAtomTypes], Real b[][NumAtomTypes], Real c[], int atom, Real s);
Real ScatteringFactor(int atom, Real s, string ScatteringType);
void AtomScatteringFactor(IntensityStruct &i, string ScatteringType);
Real SphereScattering(Real radius, Real density, Real s);
Real GaussianScattering(Real radius, Real density, Real s);
Real TrapazoidalScattering(Real radius, Real density, Real s);
Real SphericalScattering(Real radius, Real density, Real s, string SphereType);
Real SolventCorrectedScattering(int n, Real radius, Real s, Real f, Real density, Real hsdensity, ParamStruct params);
Real SolventCorrectedScattering(int n, Real radius, Real s, Real density, Real hsdensity, ParamStruct params);
void MinMax2(int TotalParticles, Real &Min, Real &Max, vector<AtomStruct> Atoms);
void VectorAverage(int natom, Real atomr[], Real contrast, Real hsdensity, int points, IntensityStruct &i, ParamStruct &params, vector<AtomStruct> Atoms);
void cube3(int natom, Real atomr[], Real numatom[], Real contrast, Real hsdensity, int points, IntensityStruct &i, ParamStruct &params, vector<AtomStruct> Atoms, bool UniformHydrationShell);
void cube4b(int natom, Real atomr[], Real contrast, Real hsdensity, IntensityStruct &i, vector<AtomStruct> Atoms, ParamStruct &params);
Real FindProteinElectrons(vector<AtomStruct> &Atoms, vector<CubeStruct> &cubes, Real CubeSize);
void CalcCubeIntensity(vector<CubeStruct> &cubes, IntensityStruct &i, vector<AtomStruct> &Atoms, ParamStruct &params);
void FindCavitiesByCutOff(Real contrast, vector<CubeStruct> &cubes);
void AssignCubeDensities1(vector<CubeStruct> &cubes, Real contrast, vector<AtomStruct> Atoms, ParamStruct &params);
void SubtractBulkDensity(vector<CubeStruct> &cubes, Real density);
void SubtractBulkDensity(vector<CubeStruct> &cubes, Real density, Real PrdfBulkDensity);
void RemoveZeroDensityCubes(vector<CubeStruct> &cubes);
void SetNonZeroCubesToHydrationShell(vector<CubeStruct> &cubes, Real contrast);
void AssignCubeDensities(vector<CubeStruct> &cubes, Real contrast, Real hsdensity, vector<AtomStruct> &Atoms, ParamStruct &params);
void Hydrate(Real contrast, Real hsdensity, vector<AtomStruct> &Atoms, Real atomr[], ParamStruct params);
void ConvertGrid2(Real xmin, Real ymin, Real zmin, vector<CubeStruct> &cubes, Real ***CubeWeight3D, ParamStruct params);
void GeneralMinMax(int Num, vector<Real> Xcoor, vector<Real> Ycoor, vector<Real> Zcoor, Real &xmin, Real &ymin, Real &zmin, Real &xmax, Real &ymax, Real &zmax);
void DensityMapToPdb(lattice &cubes, string PdbFile);
void CubesToPdb(vector<CubeStruct> &cubes, string PdbFile);
void DecreaseCubeResolution(lattice &cubes, Real CubeSize);
void DecreaseCubeResolution(vector<CubeStruct> &cubes, ParamStruct &params);
void cube4d(int natom, Real atomr[], Real numatom[], Real contrast, Real hsdensity, IntensityStruct &i, vector<AtomStruct> &Atoms, ParamStruct params);
void InterpolateFFT(vector< vector< vector<Real> > > &TempOutputReal, vector< vector< vector<Real> > > &TempOutputImag, Real IrealCube[], Real IimagCube[], int points, IntensityStruct &i, int xmax, int ymax, Real dx, Real dy, Real dz, Real inc, int Max, ParamStruct &params, Real cosphi, Real theta);
Real InterpolateFFT(int xbin, int ybin, int zbin, Real dx, Real dy, Real dz, Real ***TempOutputReal, Real CubeSize, Real Max);
void InterpolateFFT3D(Real ***TempOutputReal, Real ***TempOutputImag, Real IrealCube[], Real IimagCube[], int points, IntensityStruct i, int xmax, int ymax, Real dx, Real dy, Real dz, Real inc, int Max, ParamStruct params);
bool AllocateMemoryForFFT(Array3D &TempOutputImagX, Array3D &TempOutputRealX, Array3D &TempOutputImagY, Array3D &TempOutputRealY, Array3D &TempOutputImagZ, Array3D &TempOutputRealZ, int xmax, int ymax, int zmax, int Max);
void CubeFFT(lattice &CubeWeight3D, Array3D &TempOutputImagX, Array3D &TempOutputRealX, Array3D &TempOutputImagY, Array3D &TempOutputRealY, Array3D &TempOutputImagZ, Array3D &TempOutputRealZ, int xmax, int ymax, int zmax, int Max, Real contrast, IntensityStruct &i, vector<CubeStruct> cubes, vector<AtomStruct> &Atoms, ParamStruct params);
void InterpolateFFT(vector< vector<Real> > &ireal, vector< vector<Real> > &iimag, vector<VectorStruct> &v, IntensityStruct &i, vector< vector<Real> > &IrealCube, vector< vector<Real> > &IimagCube, int Max, Real CubeSize);
bool HasNonZero(Real a[], int Max);
void X1DFFT(int Max, int xmax, int ymax, int zmax, lattice &CubeWeight3D, vector<VectorStruct> &v, ParamStruct &params, vector< vector<Real> > &ireal, vector< vector<Real> > &iimag);
void Y1DFFT(int Max, int xmax, int ymax, int zmax, lattice &CubeWeight3D, vector<VectorStruct> &v, ParamStruct &params, vector< vector<Real> > &ireal, vector< vector<Real> > &iimag);
void Z1DFFT(int Max, int xmax, int ymax, int zmax, lattice &CubeWeight3D, vector<VectorStruct> &v, ParamStruct &params, vector< vector<Real> > &ireal, vector< vector<Real> > &iimag);
void MemoryEfficientCubeFFT(lattice &CubeWeight3D, int xmax, int ymax, int zmax, int Max, Real contrast, int points, IntensityStruct &i, vector<CubeStruct> &cubes, vector<AtomStruct> &Atoms, ParamStruct &params);
void CubeFFT3(Real contrast, IntensityStruct &i, vector<CubeStruct> &cubes, vector<AtomStruct> &Atoms, ParamStruct &params);
void CubeFFT3D(Real numatom[], Real contrast, IntensityStruct &i, vector<CubeStruct> &cubes, vector<AtomStruct> &Atoms, ParamStruct params);
int max(int a, int b);
int min(int a, int b);
Real max(Real a, Real b);
int CrysolSolvent(Real numatom[], Real atomm[], int natom, Real contrast, Real atomr[], vector<AtomStruct> &Atoms, ParamStruct params);
int FindGreatestDistance(Real bin, vector<AtomStruct> &Atoms);
void FourierTransformIntensity(IntensityStruct &i, vector<Real> &PR, int GreatestDistance, Real bin);
void FourierTransformPr(IntensityStruct &i, vector<Real> &PR, int GreatestDistance, Real bin);
void EquateIntensity(IntensityStruct &i1, IntensityStruct &i2);
Real CheckS(Real atomr[], Real s, Real density, Real hsdensity, ParamStruct &params, Real f0[]);
Real DetermineSmax(Real atomr[], Real density, Real hsdensity, ParamStruct &params);
void CalcPrFromScattering(vector<Real> &PR, Real atomr[], Real bin, Real contrast, Real hsdensity, string PrFromStructureFile, vector<AtomStruct> &Atoms, ParamStruct params);
void TestScatteringFactorPr(Real atomr, ParamStruct &params);
void CalcPrFromScattering(Real atomr[], Real bin, Real contrast, Real hsdensity, string PrFromStructureFile, vector<AtomStruct> &Atoms, ParamStruct params);
void NormalizeArea(vector<Real> &PR, Real bin);
void Pr3DToPr1D(vector< vector< vector<Real> > > &PR, vector<Real> &PR2, vector<Real> &PR_NoHydration, vector<Real> &PR_Vacuum, vector<Real> &PR_Excluded, Real NumElectrons[], Real atomr[], ParamStruct &params);
Real SumOverRange(vector<Real> &v, int start, int end);
void ChangeBinSize(vector<Real> &pr1, vector<Real> &pr2, Real bin1, Real bin2);
void ChangeBinSize(vector< vector< vector<Real> > > &pr1, vector< vector< vector<Real> > > &pr2, Real bin1, Real bin2);
void ConvoluteWithGaussian(vector<Real> &pr, Real width, Real bin);
void Convolute3DPrWithGaussian(vector< vector< vector<Real> > > &pr, Real bin);
void CalcPr2(Real atomr[], Real bin, Real contrast, Real hsdensity, string PrFromStructureFile2, vector<AtomStruct> &Atoms, ParamStruct params, vector< vector< vector<Real> > > &PR, vector<Real> &PR2, vector<Real> &PR_NoHydration, vector<Real> &PR_Vacuum, vector<Real> &PR_Excluded);
void CalcPr2(Real atomr[], Real bin, Real contrast, Real hsdensity, string PrFromStructureFile2, vector<AtomStruct> &Atoms, ParamStruct params);
void ConvertCubesToAtoms(vector<CubeStruct> &cubes, Real atomr[], vector<AtomStruct> &Atoms, ParamStruct &params);
void PrintMaxdistance(Real maxdistance[][NumAtomTypes]);
void MinMaxPr(Real maxdistance[][NumAtomTypes], Real mindistance[][NumAtomTypes]);
void findpr(Real bin, Real maxdistance[][NumAtomTypes], Real mindistance[][NumAtomTypes], vector<AtomStruct> &Atoms, bool UniformHydrationShell);
void InitializeSinc(Real bin, Real maxdistance[][NumAtomTypes], IntensityStruct &i);
void ApplyScatteringFactors(Real atomr[], IntensityStruct &i, Real contrast, Real hsdensity, ParamStruct params, int points);
void ZeroIntensity(IntensityStruct &i);
void Debye(Real atomr[], IntensityStruct &i, Real contrast, Real hsdensity, Real bin, int points, Real maxdistance[NumAtomTypes][NumAtomTypes], Real mindistance[NumAtomTypes][NumAtomTypes], vector<AtomStruct> &Atoms, ParamStruct params);
void nohistogram(Real atomr[], IntensityStruct &i, Real contrast, Real hsdensity, Real bin, int points, Real numatom[], vector<AtomStruct> &Atoms, ParamStruct params );
void nohistogram2(Real atomr[], IntensityStruct &i, Real contrast, Real hsdensity, Real bin, int points, Real numatom[], vector<AtomStruct> &Atoms, ParamStruct params);
void charge(Real atomr[], IntensityStruct &i, Real contrast, Real hsdensity, Real bin, int points, Real numatom[], vector<AtomStruct> &Atoms, ParamStruct params);
void SphericalHarmonic(Real phi, Real theta, int lvalue, int mvalue, Real &RealOut, Real &ImagOut);
void multipole(Real atomr[], IntensityStruct &i, Real contrast, Real hsdensity, int points, vector<AtomStruct> Atoms, ParamStruct params);
void implicitresidues();
void InitializeDistance(Real maxdistance[][NumAtomTypes]);
void ApplyPeriodicBoundaryConditions(vector<AtomStruct> &Atoms, ParamStruct &params);
void watersphere(Real atomr[], IntensityStruct &i, Real contrast, Real hsdensity, Real bin, int points, Real numatom[], vector<AtomStruct> &Atoms, ParamStruct params);
Real ContinuumScattering(Real sradius, Real s, Real density[], Real contrast);
void FindNumAtom(Real numatom[], vector<AtomStruct> &Atoms);
void MakeWaterSphere(Real atomr[], Real numatom[], vector<AtomStruct> &Atoms, ParamStruct params);
void Image(vector<AtomStruct> &Atoms, ParamStruct &params, int NumPerEdge);
void OutputIntensity(IntensityStruct &i, string IntensityFile);
void trajectory(Real atomr[], Real solventatomr[], IntensityStruct &i, Real contrast, Real hsdensity, Real bin, int points, Real scale, ParamStruct params);
void SetWeightsForMerge(vector<AtomStruct> &Atoms, Real NumStructures);
void Merge(vector<AtomStruct> &Atoms, ParamStruct params);
Real normalize(vector<Real> &calc, vector<Real> expi, vector<Real> error, int beginfit, int endfit);
Real radiusgyration(Real atomr[], Real contrast, Real hsdensity, vector<AtomStruct> &Atoms, ParamStruct params);
Real calcVacuumRg(vector<AtomStruct> &Atoms);
Real calcExcludedVolumeRg(Real atomr[], Real density, vector<AtomStruct> &Atoms, ParamStruct params);
Real gyrationfromscattering(vector<Real> i, vector<Real> s);
void FitPr4(int NumVariables, int points, vector<Real> s, vector<Real> expi, vector<Real> error, ParamStruct params);
Real FitPr5(int NumVariables, int points, int NumPrPoints, Real Dmax, vector<Real> s, vector<Real> i, vector<Real> expi, Real PR[], ParamStruct params);
void PrFromScattering(int points, vector<Real> s, vector<Real> expi, vector<Real> error, ParamStruct params);
void FitPolynomial(int degree, int FirstPoint, int LastPoint, Real InputX[], Real InputY[], Real output[]);
void Smooth(int degree, int SegmentSize, int Step, int StartFrom, int EndAt, Real InputX[], Real InputY[], Real output[]);
void ExtrapolateIntensity(vector<Real> s, vector<Real> expi, int points, ParamStruct params);
void fourierpr(vector<Real> s, vector<Real> expi, vector<Real> error, int points, char prfile[1000], ParamStruct params);
void fourierpr2(vector<Real> s, vector<Real> i, int points, char prfile[1000], Real bin);
void GetFitOptions(vector<bool> fit, ParamStruct params);
void solvent(Real atomr[], vector<AtomStruct> &Atoms, Real contrast, ParamStruct &params);
Real fit(int natom, Real atomr[], IntensityStruct &i, Real contrast, Real &hsdensity, Real bin, int points, Real numatom[], vector<AtomStruct> &Atoms, ParamStruct params);
Real OptimizeParameter(IntensityStruct &i, vector<AtomStruct> &Atoms, Real contrast, Real bin, Real maxdistance[][NumAtomTypes], Real mindistance[][NumAtomTypes], Real hsdensity, Real atomr[], vector<Real> &parameter, ParamStruct &params, int index, int natom);
Real ItterateOverParameters(vector<bool> fit, IntensityStruct &i, vector<AtomStruct> &Atoms, Real contrast, Real bin, Real maxdistance[][NumAtomTypes], Real mindistance[][NumAtomTypes], Real hsdensity, Real atomr[], vector<Real> &parameter, ParamStruct &params, int natom);
Real fit2(int natom, Real atomr[], IntensityStruct &i, Real contrast, Real &hsdensity, Real bin, int points, Real numatom[], vector<AtomStruct> &Atoms, ParamStruct params);
Real fit3(int natom, Real atomr[], IntensityStruct &i, Real contrast, Real &hsdensity, Real bin, int points, Real numatom[], vector<AtomStruct> &Atoms, ParamStruct params);
void ChooseIntensityCalculation(int natom, Real atomr[], Real solventatomr[], IntensityStruct &i, Real contrast, Real hsdensity, Real bin, int points, Real numatom[], Real maxdistance[][NumAtomTypes], Real mindistance[][NumAtomTypes], vector<AtomStruct> &Atoms, ParamStruct params);
void ReadParameterFile(string ParameterFile, Real atomr[]);
void SetDefaultParameters(ParamStruct &params);
void PrintParams(ParamStruct &params);
void PrintHelp();
void GetAtoms(vector<AtomStruct> &Atoms, Real numatom[], ParamStruct params);
void SetDefaultAtomicRadii(Real atomr[], ParamStruct params);
void SetFraserSuzukiMacReaAtomicRadii(Real atomr[]);
void GetAngles(IntensityStruct &i, ParamStruct params);
void InitializeIntensity(IntensityStruct &i, int points);
void interogate(ParamStruct params, Real atomr[]);
void SetHydrationRadius(vector<AtomStruct> &Atoms, Real solventatomr[]);
void SetHydrationRadius(vector<AtomStruct> &Atoms);
void SetDefaultVDW(vector<AtomStruct> &Atoms, Real solventatomr[]);
void SetDefaultSolventAtomR(Real solventatomr[]);
void ScaleHydrationRadius(Real HydrationRadiusScale, vector<AtomStruct> &Atoms);
void SetVDWRadius(vector<AtomStruct> &Atoms, ParamStruct params, Real solventatomr[]);
void preprocess(ParamStruct params, int natom, Real numatom[], Real atomr[], vector<AtomStruct> &Atoms, Real maxdistance[][NumAtomTypes], Real mindistance[][NumAtomTypes], IntensityStruct &i);
void waxs(ParamStruct params, int natom, Real atomr[], IntensityStruct &i, IntensityStruct &IntensityVacuum, IntensityStruct &IntensityNoHydration, vector<AtomStruct> &Atoms, Real numatom[]);
void SetIntensityOutputFileName(string xyz, string &intensityfile, string &logfile);
void HydrationEffects(IntensityStruct &i, IntensityStruct &IntensityVacuum, IntensityStruct &IntensityNoHydration, ParamStruct params);
void ParamsToAtomicRadii(ParamStruct &params, Real atomr[]);
int main (int argc, char *argv[]);
#endif
