#ifndef _MathUtils_included_
#define _MathUtils_included_

# include "TypeDef.h"
# include "VectorManip.h"

template <class Matrix_T>
void PrintMatrix(Matrix_T Matrix)
{
	int i, j, Size1, Size2;
	Size1=Matrix.size();
	Size2=Matrix[0].size();
	for (i=0;i<Size1;i++)
	{
		for (j=0;j<Size2;j++) cout <<Matrix[i][j]<<"\t";
		cout <<endl;
	}
	cout <<endl;
}

template <class Matrix_T>
void CreateMatrix(Matrix_T &Matrix, int Size1, int Size2)
{
	int i;
	vector<Real> v;
	for (i=0; i<Size2; i++) v.push_back(0);
	for (i=0; i<Size1; i++) Matrix.push_back(v);
}

template <class Matrix_T>
void DeleteMatrix(Matrix_T &Matrix)
{
	int i, Size=Matrix.size();
	for (i=0; i<Size; i++) Matrix.pop_back();
}

bool QuadraticEquation(Real a, Real b, Real c, Real &low, Real &high)
{
	Real sq;
	sq=b*b-4.0*a*c;
	if (sq<0) return false;
	low=(-b-sqrt(sq))/(2.0*a);
	high=(-b+sqrt(sq))/(2.0*a);
	return true;
}

VectorStruct VectorStruct::operator+ (VectorStruct v)
{
	VectorStruct temp;
	temp.x=x+v.x;
	temp.y=y+v.y;
	temp.z=z+v.z;
	return (temp);
}

VectorStruct VectorStruct::operator- (VectorStruct v)
{
	VectorStruct temp;
	temp.x=x-v.x;
	temp.y=y-v.y;
	temp.z=z-v.z;
	return (temp);
}

VectorStruct VectorStruct::operator* (Real scalar)
{
	VectorStruct temp;
	temp.x=x*scalar;
	temp.y=y*scalar;
	temp.z=z*scalar;
	return (temp);
}

VectorStruct VectorStruct::operator/ (Real scalar)
{
	VectorStruct temp;
	temp.x=x/scalar;
	temp.y=y/scalar;
	temp.z=z/scalar;
	return (temp);
}

Real VectorLength(VectorStruct v)
{
	return sqrt(v.x*v.x+v.y*v.y+v.z*v.z);
}

Real coth(Real x)
{
	Real exp2;
	exp2=exp(2.0*x);
	return (exp2+1.0)/(exp2-1.0);
}

Real csch(Real x)
{
	//cout <<"exp("<<x<<")= "<<exp(x)<<endl;
	return 2.0/(exp(x)-exp(-x));
}

/*
void Equation(long double **coefficient, long double variable[], int nequations)
{
	//Finds the solution to a system of equations using gaussian elimination.
        bool verbose;
	int i, m, n;
        long double coefficientnn;
        long double scale;

	verbose=false;

	if (verbose)
	{
		cout <<"nequations= "<<nequations<<endl;
		for (n=0;n<nequations;n++)
		{
			for (m=0;m<=nequations;m++)
			{
				cout <<coefficient[m][n]<<"\t";
			}
			cout <<endl;
		}
		cout <<endl;
	}

	for (n=0;n<nequations-1;n++)
        {
                coefficientnn=coefficient[n][n];
                if (coefficientnn!=0)
                {
                        for (m=n+1;m<nequations;m++)
                        {
                                scale=coefficient[n][m]/coefficientnn;
                                for (i=0;i<nequations+1;i++)
                                {
                                        coefficient[i][m]=coefficient[i][m]-coefficient[i][n]*scale;
                                }
                        }
                }
        }
	
	if (verbose)
	{
        	for (n=0;n<nequations;n++)
        	{
                	for (m=0;m<=nequations;m++)
                	{
                        	cout <<coefficient[m][n]<<"\t";
                	}
                	cout <<endl;
        	}
		cout <<endl;
	}

        for (n=nequations-1;n>0;n=n-1)
        {
                coefficientnn=coefficient[n][n];
                if (coefficientnn!=0)
                {
			for (m=n-1;m>-1;m=m-1)
                        {
                                scale=coefficient[n][m]/coefficientnn;
				//cout <<"coefficient["<<n<<"]["<<m<<"]= "<<coefficient[n][m]<<" coefficientnn= "<<coefficientnn<<" scale= "<<scale<<endl;
                                for (i=n;i<nequations+1;i++)
                                {
                                        coefficient[i][m]=coefficient[i][m]-coefficient[i][n]*scale;
                                }

				if (verbose)
				{
        				for (int n2=0;n2<nequations;n2++)
        				{
                				for (int m2=0;m2<=nequations;m2++)
                				{
                        				cout <<coefficient[m2][n2]<<"\t";
                				}
                				cout <<endl;
        				}
					cout <<endl;
				}
                        }
                }
        }
	if (verbose)
	{
        	for (n=0;n<nequations;n++)
        	{
                	for (m=0;m<=nequations;m++)
                	{
                        	cout <<coefficient[m][n]<<"\t";
                	}
                	cout <<endl;
        	}
		cout <<endl;
	}

        for (n=0;n<nequations;n++)
        {
                variable[n]=coefficient[nequations][n]/coefficient[n][n];
		if (verbose) cout <<"Variable "<<n+1<<" is "<<variable[n]<<"\n";
        }
}

void Equation2(long double coefficient[][500], long double variable[], int nequations)
{
	//Finds the solution to a system of equations using gaussian elimination.
        int i, m, n;
        long double coefficientnn;
        long double scale;

	//cout <<"nequations= "<<nequations<<endl;
	//for (n=0;n<nequations;n++)
	//{
	//	for (m=0;m<=nequations;m++)
	//	{
	//		cout <<coefficient[m][n]<<"\t";
	//	}
	//	cout <<endl;
	//}
	//cout <<endl;

	for (n=0;n<nequations-1;n++)
        {
                coefficientnn=coefficient[n][n];
                if (coefficientnn!=0)
                {
                        for (m=n+1;m<nequations;m++)
                        {
                                scale=coefficient[n][m]/coefficientnn;
                                for (i=0;i<nequations+1;i++)
                                {
                                        coefficient[i][m]=coefficient[i][m]-coefficient[i][n]*scale;
                                }
                        }
                }
        }
        for (n=0;n<nequations;n++)
        {
                for (m=0;m<=nequations;m++)
                {
                        cout <<coefficient[m][n]<<"\t";
                }
                cout <<endl;
        }
	cout <<endl;
        for (n=nequations;n>0;n=n-1)
        {
                coefficientnn=coefficient[n][n];
                if (coefficientnn!=0)
                {
			for (m=n-1;m>-1;m=m-1)
                        {
                                scale=coefficient[n][m]/coefficientnn;
                                for (i=n;i<nequations+1;i++)
                                {
                                        coefficient[i][m]=coefficient[i][m]-coefficient[i][n]*scale;
                                }
                        }
                }
        }
        for (n=0;n<nequations;n++)
        {
                for (m=0;m<=nequations;m++)
                {
                        cout <<coefficient[m][n]<<"\t";
                }
                cout <<endl;
        }
	cout <<endl;
        for (n=0;n<nequations;n++)
        {
                variable[n]=coefficient[nequations][n]/coefficient[n][n];
                cout <<"Variable "<<n+1<<" is "<<variable[n]<<"\n";
        }
}
*/

template <typename T>
void Equation(vector< vector<T> > &coefficient, vector<T> &variable, int nequations)
{
	//Finds the solution to a system of equations using gaussian elimination.
        bool verbose;
	int i, m, n;
        T coefficientnn;
        T scale;

	verbose=false;

	if (verbose)
	{
		cout <<"nequations= "<<nequations<<endl;
		for (n=0;n<nequations;n++)
		{
			for (m=0;m<=nequations;m++)
			{
				cout <<coefficient[m][n]<<"\t";
			}
			cout <<endl;
		}
		cout <<endl;
	}

	for (n=0;n<nequations-1;n++)
        {
                coefficientnn=coefficient[n][n];
                if (coefficientnn!=0)
                {
                        for (m=n+1;m<nequations;m++)
                        {
                                scale=coefficient[n][m]/coefficientnn;
                                for (i=0;i<nequations+1;i++)
                                {
                                        coefficient[i][m]=coefficient[i][m]-coefficient[i][n]*scale;
                                }
                        }
                }
        }
	
	if (verbose)
	{
        	for (n=0;n<nequations;n++)
        	{
                	for (m=0;m<=nequations;m++)
                	{
                        	cout <<coefficient[m][n]<<"\t";
                	}
                	cout <<endl;
        	}
		cout <<endl;
	}

        for (n=nequations-1;n>0;n=n-1)
        {
                coefficientnn=coefficient[n][n];
                if (coefficientnn!=0)
                {
			for (m=n-1;m>-1;m=m-1)
                        {
                                scale=coefficient[n][m]/coefficientnn;
				//cout <<"coefficient["<<n<<"]["<<m<<"]= "<<coefficient[n][m]<<" coefficientnn= "<<coefficientnn<<" scale= "<<scale<<endl;
                                for (i=n;i<nequations+1;i++)
                                {
                                        coefficient[i][m]=coefficient[i][m]-coefficient[i][n]*scale;
                                }

				if (verbose)
				{
        				for (int n2=0;n2<nequations;n2++)
        				{
                				for (int m2=0;m2<=nequations;m2++)
                				{
                        				cout <<coefficient[m2][n2]<<"\t";
                				}
                				cout <<endl;
        				}
					cout <<endl;
				}
                        }
                }
        }
	if (verbose)
	{
        	for (n=0;n<nequations;n++)
        	{
                	for (m=0;m<=nequations;m++)
                	{
                        	cout <<coefficient[m][n]<<"\t";
                	}
                	cout <<endl;
        	}
		cout <<endl;
	}

        for (n=0;n<nequations;n++)
        {
                variable[n]=coefficient[nequations][n]/coefficient[n][n];
		if (verbose) cout <<"Variable "<<n+1<<" is "<<variable[n]<<"\n";
        }
}

void GaussJordanElimination(long double **coefficient, long double **InverseMatrix, int nequations)
{
	//Finds the inverse matrix using Gauss-Jordan Elimination
        bool verbose;
	int i, m, n;
        long double coefficientnn;
        long double scale;

	verbose=false;

	if (verbose)
	{
		cout <<"nequations= "<<nequations<<endl;
		for (n=0;n<nequations;n++)
		{
			for (m=0;m<=nequations;m++)
			{
				cout <<coefficient[m][n]<<"\t";
			}
			cout <<endl;
		}
		cout <<endl;
	}

	for (m=0;m<nequations;m++)
	{
		for (n=0;n<nequations;n++)
		{
			if (m==n) InverseMatrix[m][n]=1.0;
			else InverseMatrix[m][n]=0.0;
		}
	}

	for (n=0;n<nequations-1;n++)
        {
                coefficientnn=coefficient[n][n];
                if (coefficientnn!=0)
                {
                        for (m=n+1;m<nequations;m++)
                        {
                                scale=coefficient[n][m]/coefficientnn;
                                for (i=0;i<nequations;i++)
                                {
                                        coefficient[i][m]=coefficient[i][m]-coefficient[i][n]*scale;
					InverseMatrix[i][m]=InverseMatrix[i][m]-InverseMatrix[i][n]*scale;
                                }
                        }
                }
        }
	
	if (verbose)
	{
        	for (n=0;n<nequations;n++)
        	{
                	for (m=0;m<=nequations;m++)
                	{
                        	cout <<coefficient[m][n]<<"\t";
                	}
                	cout <<endl;
        	}
		cout <<endl;
	}

        for (n=nequations-1;n>0;n=n-1)
        {
                coefficientnn=coefficient[n][n];
                if (coefficientnn!=0)
                {
			for (m=n-1;m>-1;m=m-1)
                        {
                                scale=coefficient[n][m]/coefficientnn;
				//cout <<"coefficient["<<n<<"]["<<m<<"]= "<<coefficient[n][m]<<" coefficientnn= "<<coefficientnn<<" scale= "<<scale<<endl;
                                for (i=n;i<nequations;i++)
                                {
                                        coefficient[i][m]=coefficient[i][m]-coefficient[i][n]*scale;
					InverseMatrix[i][m]=InverseMatrix[i][m]-InverseMatrix[i][n]*scale;
                                }

				if (verbose)
				{
        				for (int n2=0;n2<nequations;n2++)
        				{
                				for (int m2=0;m2<=nequations;m2++)
                				{
                        				cout <<coefficient[m2][n2]<<"\t";
                				}
                				cout <<endl;
        				}
					cout <<endl;
				}
                        }
                }
        }
	if (verbose)
	{
        	for (n=0;n<nequations;n++)
        	{
                	for (m=0;m<=nequations;m++)
                	{
                        	cout <<coefficient[m][n]<<"\t";
                	}
                	cout <<endl;
        	}
		cout <<endl;
	}
}

template <class Matrix_T>
void GaussJordanElimination(Matrix_T coefficient, Matrix_T &InverseMatrix)
{
	//Finds the inverse matrix using Gauss-Jordan Elimination
        bool verbose;
	int i, m, n;
	int nequations=coefficient.size();
        long double coefficientnn;
        long double scale;

	verbose=false;

	if (verbose)
	{
		cout <<"nequations= "<<nequations<<endl;
		PrintMatrix(coefficient);
	}

	for (m=0;m<nequations;m++)
	{
		for (n=0;n<nequations;n++)
		{
			if (m==n) InverseMatrix[m][n]=1.0;
			else InverseMatrix[m][n]=0.0;
		}
	}
	
	for (n=0;n<nequations-1;n++)
        {
                coefficientnn=coefficient[n][n];
                if (coefficientnn!=0)
                {
                        for (m=n+1;m<nequations;m++)
                        {
                                scale=coefficient[m][n]/coefficientnn;
                                for (i=0;i<nequations;i++)
                                {
                                        coefficient[m][i]-=coefficient[n][i]*scale;
					InverseMatrix[m][i]-=InverseMatrix[n][i]*scale;
                                }
                        }
                }
        }
	
	if (verbose) PrintMatrix(coefficient);

        for (n=nequations-1;n>0;n=n-1)
        {
                coefficientnn=coefficient[n][n];
                if (coefficientnn!=0)
                {
			for (m=n-1;m>-1;m=m-1)
                        {
                                scale=coefficient[m][n]/coefficientnn;
				//cout <<"coefficient["<<n<<"]["<<m<<"]= "<<coefficient[n][m]<<" coefficientnn= "<<coefficientnn<<" scale= "<<scale<<endl;
                                for (i=0;i<nequations;i++)
                                {
                                        coefficient[m][i]-=coefficient[n][i]*scale;
					InverseMatrix[m][i]-=InverseMatrix[n][i]*scale;
                                }

				if (verbose) PrintMatrix(coefficient);
                        }
                }
        }
	if (verbose) PrintMatrix(coefficient);
	for (n=0;n<nequations;n++)
	{
		for (m=0;m<nequations;m++) InverseMatrix[n][m]/=coefficient[n][n];
	}
}

long double GetMatrixElement(long double **Matrix1, long double **Matrix2, int m, int n, int Size)
{
	int i;
	Real sum=0;
	for (i=0;i<Size;i++) sum+=Matrix1[m][i]*Matrix2[i][n];
	return sum;
}

void MatrixMultiply(long double **Matrix1, long double **Matrix2, long double **MatrixOut, int Size1, int Size2)
{
	int m, n;

	for (m=0;m<Size1;m++)
	{
		for (n=0;n<Size2;n++)
		{
			MatrixOut[m][n]=GetMatrixElement(Matrix1, Matrix2, m, n, Size1);
		}
	}
}

template<class T>
T GetMatrixElement(vector< vector<T> > Matrix1, vector< vector<T> > Matrix2, int m, int n)
{
	int i, Size=Matrix2.size();
	Real sum=0;
	for (i=0;i<Size;i++) sum+=Matrix1[m][i]*Matrix2[i][n];
	
	return sum;
}

template<class Matrix_T>
void MatrixMultiply(Matrix_T Matrix1, Matrix_T Matrix2, Matrix_T &MatrixOut)
{
	int m, n, Size1, Size2;
	Size1=Matrix1.size();
	Size2=Matrix1[0].size();
	for (m=0;m<Size1;m++)
	{
		for (n=0;n<Size2;n++)
		{
			MatrixOut[m][n]=GetMatrixElement(Matrix1, Matrix2, m, n);
		}
	}
}

template<class Matrix_T>
void Transpose(Matrix_T Matrix, Matrix_T &MatrixTranspose)
{
	int i, j;
	int Size1, Size2;

	Size1=Matrix.size();
	Size2=Matrix[0].size();

	if (MatrixTranspose.size()!=Size2 || MatrixTranspose[0].size()!=Size1)
	{
		DeleteMatrix(MatrixTranspose);
		CreateMatrix(MatrixTranspose, Size2, Size1);
	}

	for (i=0;i<Size1;i++)
	{
		for (j=0;j<Size2;j++) MatrixTranspose[j][i]=Matrix[i][j];
	}
}

template<class Matrix_T>
void Transpose(Matrix_T &Matrix)
{
	int i, j;
	int Size1, Size2;
	Matrix_T MatrixTranspose;

	Size1=Matrix.size();
	Size2=Matrix[0].size();

	if (MatrixTranspose.size()!=Size2 || MatrixTranspose[0].size()!=Size1)
	{
		CreateMatrix(MatrixTranspose, Size2, Size1);
	}

	for (i=0;i<Size1;i++)
	{
		for (j=0;j<Size2;j++) MatrixTranspose[j][i]=Matrix[i][j];
	}
	CopyVector(MatrixTranspose, Matrix);
}

void swap(Real &x, Real &y)
{
	Real temp;

	temp=x;
	x=y;
	y=temp;
}

template <class Matrix_T>
void Transpose(Matrix_T &Matrix, int Size1, int Size2)
{
	//Only works for square matrix.
	Real temp;

	for (int i=0;i<Size1;i++)
	{
		for (int j=i;j<Size2;j++) 
		{
			swap(Matrix[i][j], Matrix[j][i]);
		}
	}
}

template<class T>
T average(vector<T> x)
{
	int i, Size=x.size();
	Real sum=0;

	for (i=0;i<Size;i++) sum+=x[i];

	return sum/Real(Size);
}

Real variance(vector< vector<Real> > x)
{
	int i, j, Size1, Size2;
	Real sum, sum_sqr, NumElements;
	Size1=x.size();
	Size2=x[0].size();
	sum=0;
	sum_sqr=0;
	for (i=0;i<Size1;i++)
	{
		for (j=0;j<Size2;j++)
		{
			sum+=x[i][j];
			sum_sqr+=x[i][j]*x[i][j];
		}
	}

	NumElements=Real(Size1*Size2);
	return (sum_sqr/NumElements-sum*sum/(NumElements*NumElements));
}

template <class T>
Real covariance(vector<T> x, vector<T> y)
{
	int n, Size=x.size();
	Real sum=0;
	Real AverageX, AverageY;

	AverageX=average(x);
	AverageY=average(y);

	for (n=0;n<Size;n++) sum+=(x[n]-AverageX)*(y[n]-AverageY);

	return sum;
}

template<class Matrix_T>
void CovarianceMatrix(Matrix_T Matrix, Matrix_T &CovarianceMatrix)
{
	int i, j;
	int Size1, Size2;

	Size1=Matrix.size();
	Size2=Matrix[0].size();

	if (CovarianceMatrix.size()!=Size1 || CovarianceMatrix[0].size()!=Size1)
	{
		DeleteMatrix(CovarianceMatrix);
		CreateMatrix(CovarianceMatrix, Size1, Size1);
	}

	for (i=0;i<Size1;i++)
	{
		for (j=i;j<Size1;j++)
		{
			CovarianceMatrix[i][j]=covariance(Matrix[j], Matrix[i]);
			CovarianceMatrix[j][i]=CovarianceMatrix[i][j];
		}
	}
}

Real Monotonicity(vector<Real> x, vector<Real> y)
{
	//Calculates the probability that if y decreases x decreases.
	int m, n, Size;
	Real monatonicity;
	Size=x.size();
	monatonicity=0;
	for (m=0;m<Size-1;m++)
	{
		for (n=m+1;n<Size;n++)
		{
			if (y[m]<y[n] && x[m]<y[n]) monatonicity+=1.0;
		}
	}
	monatonicity=monatonicity*2.0/Real((Size-1)*Size);
	return monatonicity;
}

template <class Vector_T>
bool IsSorted(Vector_T &v)
{
	int n;
	int Size=v.size();
	if (Size>1)
	{
		for (n=1;n<Size;n++) 
		{
			if (v[n]<v[n-1]) return false;
		}
	}

	return true;

}

template <class Vector_T>
void Sort(Vector_T &v)
{
	bool Sorted1, Sorted2;
	int n;
	int Size, Size1, Size2;
	Real first, last;
	vector<Real> v1, v2;

	Size=v.size();
	first=v[0];
	for (n=0;n<Size;n++)
	{
		if (v[n]<first)
		{
			first=v[n];
			break;
		}
		else if (v[n]>first) break;
	}

	for (n=0;n<Size;n++)
	{
		if (v[n]<=first) v1.push_back(v[n]);
		else v2.push_back(v[n]);
	}

	Size1=v1.size();
	Size2=v2.size();
	//for (n=0;n<Size1;n++) cout <<"v1["<<n<<"]= "<<v1[n]<<endl;
	//cout <<endl;
	//for (n=0;n<Size2;n++) cout <<"v2["<<n<<"]= "<<v2[n]<<endl;
	//cout <<endl;
	Sorted1=IsSorted(v1);
	Sorted2=IsSorted(v2);
	if (Size1>1 && !Sorted1) Sort(v1);
	if (Size2>1 && !Sorted2) Sort(v2);

	for (n=0;n<Size;n++) v.pop_back();

	for (n=0;n<Size1;n++)
	{
		v.push_back(v1[n]);
	}

	for (n=0;n<Size2;n++)
	{
		v.push_back(v2[n]);
	}

}

int RandInt(int Max)
{
	int Rand;
	Rand=int(Real(rand())*Real(Max)/Real(RAND_MAX)+0.5);
	return Rand;
}

Real RandDouble(Real Max)
{
	Real Rand;
	Rand=2.0*Max*Real(rand())/Real(RAND_MAX)-Max;
	return Rand;
}

template <typename T>
void LinearRegression(vector<T> x, vector<T> y, T &slope, T &yintercept)
{
	int m, n, Size;
	vector<long double> variable;
	vector< vector<long double> > coefficient;
	//cout <<"In FitLine"<<endl;
	CreateVector(variable, 2);
	CreateMatrix(coefficient, 3, 2);
	//cout <<"Initialized coefficeint"<<endl;
	Size=x.size();
	coefficient[0][0]=(long double)(Size);
	for (n=0;n<Size;n++) coefficient[1][0]+=x[n];
	for (n=0;n<Size;n++) coefficient[2][0]+=y[n];
	coefficient[0][1]=coefficient[1][0];
	for (n=0;n<Size;n++) coefficient[1][1]+=x[n]*x[n];
	for (n=0;n<Size;n++) coefficient[2][1]+=x[n]*y[n];
	//cout <<"Assigned coefficients"<<endl;
	Equation(coefficient, variable, 2);
	//cout <<"Solved equation"<<endl;
	yintercept=variable[0];
	slope=variable[1];
}

void FFT(Real InputReal[], Real InputImag[], Real OutputReal[], Real OutputImag[], int max)
{
	int n, m;
	int halfmax;
	Real DoubleHalfMax;
	Real *EvenInputReal, *EvenInputImag, *OddInputReal, *OddInputImag;
	Real *EvenOutputReal, *EvenOutputImag, *OddOutputReal, *OddOutputImag;

	DoubleHalfMax=Real(max)*0.5;
	halfmax=int(floor(DoubleHalfMax));

	EvenInputReal=new Real[halfmax];
	EvenInputImag=new Real[halfmax];
	OddInputReal=new Real[halfmax];
	OddInputImag=new Real[halfmax];

	EvenOutputReal=new Real[halfmax];
	EvenOutputImag=new Real[halfmax];
	OddOutputReal=new Real[halfmax];
	OddOutputImag=new Real[halfmax];

	for (int i=0;i<halfmax;i++)
	{
		EvenInputReal[i]=0;
		EvenInputImag[i]=0;
		OddInputReal[i]=0;
		OddInputImag[i]=0;
		EvenOutputReal[i]=0;
		EvenOutputImag[i]=0;
		OddOutputReal[i]=0;
		OddOutputImag[i]=0;
	}

	n=0;
	m=0;

	if (max>1)
	{
		while (n<max)
		{
			EvenInputReal[m]=InputReal[n];
			EvenInputImag[m]=InputImag[n];
			n++;
			OddInputReal[m]=InputReal[n];
			OddInputImag[m]=InputImag[n];
			n++;
			m++;
		}

		FFT(EvenInputReal, EvenInputImag, EvenOutputReal, EvenOutputImag, halfmax);
		FFT(OddInputReal, OddInputImag, OddOutputReal, OddOutputImag, halfmax);

		for (int n=0;n<halfmax;n++)
		{
			OutputReal[n]=(EvenOutputReal[n]+cos(-2.0*pi*Real(n)/Real(max))*OddOutputReal[n]-sin(-2.0*pi*Real(n)/Real(max))*OddOutputImag[n]);
			OutputImag[n]=(EvenOutputImag[n]+cos(-2.0*pi*Real(n)/Real(max))*OddOutputImag[n]+sin(-2.0*pi*Real(n)/Real(max))*OddOutputReal[n]);
		}

		for (int n=halfmax;n<max;n++)
		{
			OutputReal[n]=(EvenOutputReal[n-halfmax]-cos(-2.0*pi*Real(n-halfmax)/Real(max))*OddOutputReal[n-halfmax]+sin(-2.0*pi*Real(n-halfmax)/Real(max))*OddOutputImag[n-halfmax]);
			OutputImag[n]=(EvenOutputImag[n-halfmax]-cos(-2.0*pi*Real(n-halfmax)/Real(max))*OddOutputImag[n-halfmax]-sin(-2.0*pi*Real(n-halfmax)/Real(max))*OddOutputReal[n-halfmax]);
		}
	}
	else
	{
		OutputReal[0]=InputReal[0];
		OutputImag[0]=InputImag[0];
	}

	delete [] EvenInputReal;
	delete [] EvenInputImag;
	delete [] OddInputReal;
	delete [] OddInputImag;

	delete [] EvenOutputReal;
	delete [] EvenOutputImag;
	delete [] OddOutputReal;
	delete [] OddOutputImag;
}

void PrintArray(Real **output, int MAX)
{
	for (int i=0;i<MAX;i++)
	{
		for (int j=0;j<MAX;j++)
		{
			cout <<output[i][j]<<"\t";
		}
		cout <<endl;
	}
}

void FFT2D(Real **InputReal, Real **InputImag, Real **OutputReal, Real **OutputImag, int max)
{
	//Only works for square matrix.
	Real **OutputRealTemp, **OutputImagTemp;

	OutputRealTemp=new Real *[max];
	OutputImagTemp=new Real *[max];
	for (int i=0;i<max;i++)
	{
		*(OutputRealTemp+i)=new Real[max];
		*(OutputImagTemp+i)=new Real[max];
	}

	for (int i=0;i<max;i++)
	{
		FFT(InputReal[i], InputImag[i], OutputRealTemp[i], OutputImagTemp[i], max);
	}
	Transpose(OutputRealTemp, max, max);
	Transpose(OutputImagTemp, max, max);	
	for (int i=0;i<max;i++)
	{
		FFT(OutputRealTemp[i], OutputImagTemp[i], OutputReal[i], OutputImag[i], max);
	}
	Transpose(OutputReal, max, max);
	Transpose(OutputImag, max, max);
	for (int i=0;i<max;i++)
	{
		delete [] OutputRealTemp[i];
		delete [] OutputImagTemp[i];
	}
	delete [] OutputRealTemp;
	delete [] OutputImagTemp;
}

void FFT3D(Real ***InputReal, Real ***InputImag, Real ***OutputReal, Real ***OutputImag, int max)
{
	//Only works for cubic input.
	Real ***OutputRealTemp, ***OutputImagTemp;

	OutputRealTemp=new Real **[max];
	OutputImagTemp=new Real **[max];
	for (int i=0;i<max;i++)
	{
		*(OutputRealTemp+i)=new Real *[max];
		*(OutputImagTemp+i)=new Real *[max];
		for (int j=0;j<max;j++)
		{
			*(*(OutputRealTemp+i)+j)=new Real[max];
			*(*(OutputImagTemp+i)+j)=new Real[max];
		}
	}

	for (int i=0;i<max;i++)
	{
		FFT2D(InputReal[i], InputImag[i], OutputRealTemp[i], OutputImagTemp[i], max);
	}
	Transpose(OutputRealTemp, max, max);
	Transpose(OutputImagTemp, max, max);	
	for (int i=0;i<max;i++)
	{
		FFT2D(OutputRealTemp[i], OutputImagTemp[i], OutputReal[i], OutputImag[i], max);
	}
	Transpose(OutputReal, max, max);
	Transpose(OutputImag, max, max);
	for (int i=0;i<max;i++)
	{
		for (int j=0;j<max;j++)
		{
			delete [] OutputRealTemp[i][j];
			delete [] OutputImagTemp[i][j];
		}
		delete [] OutputRealTemp[i];
		delete [] OutputImagTemp[i];
	}
	delete [] OutputRealTemp;
	delete [] OutputImagTemp;
}
#endif
